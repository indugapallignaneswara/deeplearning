# -*- coding: utf-8 -*-
"""pattern_matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rZyQJcgAN66dDqRJLU0sI-QoUag5Q51I
"""

# Function to load data from a file
def load_data(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return [line.strip() for line in data]

# Function to find matches
def find_matches(data, patterns):
    matches = []
    for line in data:
        for pattern in patterns:
            if pattern in line:
                matches.append(line)
    return matches

# Load network traffic data
network_data = load_data('/content/network_traffic.txt')

# Load threat signatures
threat_signatures = load_data('/content/threat_signatures.txt')

# Find matches
matches = find_matches(network_data, threat_signatures)

# Print results
print("Suspicious Activity Detected:")
for match in matches:
    print(match)

"""Task 1: Extend the Pattern Matching
Objective: Enhance the pattern matching script to be case-insensitive.

Instructions:

Modify the find_matches function to ensure the pattern matching is case-insensitive.
Test the updated script with the provided example files where some patterns are in different cases.
"""

# Function to load data from a file
def load_data(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return [line.strip() for line in data]

# Function to find matches (case-insensitive)
def find_matches(data, patterns):
    matches = []
    for line in data:
        for pattern in patterns:
            if pattern.lower() in line.lower():
                matches.append(line)
    return matches

# Load network traffic data
network_data = load_data('network_traffic.txt')

# Load threat signatures
threat_signatures = load_data('threat_signatures.txt')

# Find matches
matches = find_matches(network_data, threat_signatures)

# Print results
print("Suspicious Activity Detected:")
for match in matches:
    print(match)

"""Task 2: Add Logging Functionality
Objective: Add logging to the pattern matching script to record detected threats in a separate log file.

Instructions:

Implement logging in the script to write matches to a file named detected_threats.log.
Each log entry should include a timestamp and the detected suspicious activity.

"""

import datetime

# Function to load data from a file
def load_data(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return [line.strip() for line in data]

# Function to find matches (case-insensitive)
def find_matches(data, patterns):
    matches = []
    for line in data:
        for pattern in patterns:
            if pattern.lower() in line.lower():
                matches.append(line)
    return matches

# Function to log matches with timestamp
def log_matches(matches, log_file):
    with open(log_file, 'a') as file:
        for match in matches:
            file.write(f"{datetime.datetime.now()}: {match}\n")

# Load network traffic data
network_data = load_data('network_traffic.txt')

# Load threat signatures
threat_signatures = load_data('threat_signatures.txt')

# Find matches
matches = find_matches(network_data, threat_signatures)

# Log matches
log_matches(matches, 'detected_threats.log')

# Print results
print("Suspicious Activity Detected:")
for match in matches:
    print(match)

"""Task 3: Exclude False Positives
Objective: Implement a feature to exclude specific patterns that are known false positives.

Instructions:

Create a new file false_positives.txt with patterns to exclude.
Modify the script to ignore matches found in the false_positives.txt file.
Test the script to ensure it correctly excludes false positives.
"""

def create_file(file_name, content):
    with open(file_name, 'w') as file:
        file.write(content)

# Content for false_positives.txt
false_positives_content = """User logged in"""

# Create the files
create_file('false_positives.txt', false_positives_content)

import datetime

# Function to load data from a file
def load_data(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return [line.strip() for line in data]

# Function to find matches (case-insensitive)
def find_matches(data, patterns):
    matches = []
    for line in data:
        for pattern in patterns:
            if pattern.lower() in line.lower():
                matches.append(line)
    return matches

# Function to exclude false positives
def exclude_false_positives(matches, false_positives):
    filtered_matches = []
    for match in matches:
        is_false_positive = any(fp.lower() in match.lower() for fp in false_positives)
        if not is_false_positive:
            filtered_matches.append(match)
    return filtered_matches

# Function to log matches with timestamp
def log_matches(matches, log_file):
    with open(log_file, 'a') as file:
        for match in matches:
            file.write(f"{datetime.datetime.now()}: {match}\n")

# Load network traffic data
network_data = load_data('network_traffic.txt')

# Load threat signatures
threat_signatures = load_data('threat_signatures.txt')

# Load false positives
false_positives = load_data('false_positives.txt')

# Find matches
matches = find_matches(network_data, threat_signatures)

# Exclude false positives
matches = exclude_false_positives(matches, false_positives)

# Log matches
log_matches(matches, 'detected_threats.log')

# Print results
print("Suspicious Activity Detected:")
for match in matches:
    print(match)

"""Task 4: Create a Summary Report
Objective: Generate a summary report of the pattern matching results.

Instructions:

Modify the script to create a summary report named summary_report.txt.
The report should include the total number of lines checked, total matches found, and a list of unique threat signatures detected.
"""

import datetime

# Function to load data from a file
def load_data(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return [line.strip() for line in data]

# Function to find matches (case-insensitive)
def find_matches(data, patterns):
    matches = []
    for line in data:
        for pattern in patterns:
            if pattern.lower() in line.lower():
                matches.append(line)
    return matches

# Function to exclude false positives
def exclude_false_positives(matches, false_positives):
    filtered_matches = []
    for match in matches:
        is_false_positive = any(fp.lower() in match.lower() for fp in false_positives)
        if not is_false_positive:
            filtered_matches.append(match)
    return filtered_matches

# Function to log matches with timestamp
def log_matches(matches, log_file):
    with open(log_file, 'a') as file:
        for match in matches:
            file.write(f"{datetime.datetime.now()}: {match}\n")

# Function to generate summary report
def generate_summary_report(data, matches, summary_file):
    unique_signatures = set(matches)
    with open(summary_file, 'w') as file:
        file.write(f"Total lines checked: {len(data)}\n")
        file.write(f"Total matches found: {len(matches)}\n")
        file.write("Unique threat signatures detected:\n")
        for signature in unique_signatures:
            file.write(f"{signature}\n")

# Load network traffic data
network_data = load_data('network_traffic.txt')

# Load threat signatures
threat_signatures = load_data('threat_signatures.txt')

# Load false positives
false_positives = load_data('false_positives.txt')

# Find matches
matches = find_matches(network_data, threat_signatures)

# Exclude false positives
matches = exclude_false_positives(matches, false_positives)

# Log matches
log_matches(matches, 'detected_threats.log')

# Generate summary report
generate_summary_report(network_data, matches, 'summary_report.txt')

# Print results
print("Suspicious Activity Detected:")
for match in matches:
    print(match)

"""Task 5: Visualize the Results
Objective: Visualize the pattern matching results using a simple bar chart.

Instructions:

Use a Python library like matplotlib to create a bar chart of the frequency of each detected threat signature.
Save the bar chart as an image file named threat_analysis.png.
The chart should have threat signatures on the x-axis and their frequency on the y-axis.
"""

import datetime
import matplotlib.pyplot as plt
from collections import Counter

# Function to load data from a file
def load_data(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return [line.strip() for line in data]

# Function to find matches (case-insensitive)
def find_matches(data, patterns):
    matches = []
    for line in data:
        for pattern in patterns:
            if pattern.lower() in line.lower():
                matches.append(line)
    return matches

# Function to exclude false positives
def exclude_false_positives(matches, false_positives):
    filtered_matches = []
    for match in matches:
        is_false_positive = any(fp.lower() in match.lower() for fp in false_positives)
        if not is_false_positive:
            filtered_matches.append(match)
    return filtered_matches

# Function to log matches with timestamp
def log_matches(matches, log_file):
    with open(log_file, 'a') as file:
        for match in matches:
            file.write(f"{datetime.datetime.now()}: {match}\n")

# Function to generate summary report
def generate_summary_report(data, matches, summary_file):
    unique_signatures = set(matches)
    with open(summary_file, 'w') as file:
        file.write(f"Total lines checked: {len(data)}\n")
        file.write(f"Total matches found: {len(matches)}\n")
        file.write("Unique threat signatures detected:\n")
        for signature in unique_signatures:
            file.write(f"{signature}\n")

# Function to visualize results
def visualize_results(matches, output_image):
    match_counts = Counter(matches)
    signatures = list(match_counts.keys())
    frequencies = list(match_counts.values())

    plt.figure(figsize=(10, 5))
    plt.bar(signatures, frequencies, color='blue')
    plt.xlabel('Threat Signatures')
    plt.ylabel('Frequency')
    plt.title('Frequency of Detected Threat Signatures')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(output_image)

# Load network traffic data
network_data = load_data('network_traffic.txt')

# Load threat signatures
threat_signatures = load_data('threat_signatures.txt')

# Load false positives
false_positives = load_data('false_positives.txt')

# Find matches
matches = find_matches(network_data, threat_signatures)

# Exclude false positives
matches = exclude_false_positives(matches, false_positives)

# Log matches
log_matches(matches, 'detected_threats.log')

# Generate summary report
generate_summary_report(network_data, matches, 'summary_report.txt')

# Visualize results
visualize_results(matches, 'threat_analysis.png')

# Print results
print("Suspicious Activity Detected:")
for match in matches:
    print(match)